print(x)
lower <- c(-1,-1)
upper <- c(1,1)
x[1,1] <- runif(2,lower[1],upper[1])
lower <- c(-1,-1)
upper <- c(1,1)
x[1,1] <- runif(1,lower[1],upper[1])
print(x)
x[1,2] <- runif(1,lower[1],upper[1])
print(x)
x <- matrix(c(1,2,3,4,5,6,7,8,9),nrow = 2,ncol = 10)
lower <- c(-1,-1)
upper <- c(1,1)
for (i in 1:10){
for (k in 1:2){
x[k,i] <- runif(1,lower[k],upper[k])
}
}
print(x)
x <- matrix(c(1,2,3,4,5,6,7,8,9),nrow = 2,ncol = 10)
lower <- c(-1,-1)
upper <- c(1,1)
for (i in 1:10){
for (k in 1:2){
x[k,i] <- runif(1,lower[k],upper[k])
}
}
print(x)
x <- matrix(c(1,2,3,4,5,6,7,8,9),nrow = 2,ncol = 10)
x <- matrix(c(1,2,3,4,5,6,7,8,9,9,8,7,6,5,4,3,2,1),nrow = 2,ncol = 10)
x <- matrix(0,nrow = 2,ncol = 10)
lower <- c(-1,-1)
upper <- c(1,1)
for (i in 1:10){
for (k in 1:2){
x[k,i] <- runif(1,lower[k],upper[k])
}
}
print(x)
x <- matrix(0,nrow = 2,ncol = 10)
lower <- c(-1,-1)
upper <- c(1,1)
for (i in 1:10){
for (k in 1:2){
x[k,i] <- runif(1,lower[k],upper[k])
}
}
print(x)
## have to implement lower and upper handling (they are vectors)
## initializing positions given lower vector and upper vector (for loop?)
swarm <- function(S,n,lower, upper,omega,phiP,phiG){
iterations <- 100
best_swarm <- lower
#particle positions
x <- matrix(0,nrow = n,ncol = S)
#particle best positions
p <- matrix(0,nrow = n,ncol = S)
#particle velocities
v <- matrix(0,nrow = n,ncol = S)
#for each particle i
for (i in 1:S){
#initial position
for (k in 1:n){
x[k,i] <- runif(1,lower[k],upper[k])
}
p[,i] <- x[,i]
if(f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
#initial velocity
for (k in 1:n){
v[k,i] <- runif(1,-abs(upper[k]-lower[k]),abs(upper[k]-lower[k]))
}
}
#print(x)
#print(p)
#print(v)
#print(best_swarm)
for(j in 1:iterations){
for (i in 1:S){
for (d in 1:n){
rp <- runif(1,0,1)
rg <- runif(1,0,1)
v[,i] <- omega*v[,i] + phiP*rp*(p[,i]-x[,i]) + phiG*rg*(best_swarm-x[,i])
}
x[,i] <- x[,i] + v[,i]
if (f(x[,i]) < f(p[,i])){
p[,i] <- x[,i]
#update best position in the swarm
if (f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
}
}
if((j%%2 == 0 && j < 20) || j == 1){
curve(f,lower,upper,main = c("iteration ",j))
points(x,f(x))
}
}
cat("best x value: ",best_swarm,"\n")
cat("minimum: ",f(best_swarm),"\n")
cat("\n")
}
f <- function(x,y){
return(x^2 -y^2)
}
#x <- matrix(0,nrow = 2,ncol = 10)
#lower <- c(-1,-1)
#upper <- c(1,1)
#for (i in 1:10){
#  for (k in 1:2){
#    x[k,i] <- runif(1,lower[k],upper[k])
#  }
#}
print(x)
## have to implement lower and upper handling (they are vectors)
## initializing positions given lower vector and upper vector (for loop?)
swarm <- function(S,n,lower, upper,omega,phiP,phiG){
iterations <- 100
best_swarm <- lower
#particle positions
x <- matrix(0,nrow = n,ncol = S)
#particle best positions
p <- matrix(0,nrow = n,ncol = S)
#particle velocities
v <- matrix(0,nrow = n,ncol = S)
#for each particle i
for (i in 1:S){
#initial position
for (k in 1:n){
x[k,i] <- runif(1,lower[k],upper[k])
}
p[,i] <- x[,i]
if(f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
#initial velocity
for (k in 1:n){
v[k,i] <- runif(1,-abs(upper[k]-lower[k]),abs(upper[k]-lower[k]))
}
}
#print(x)
#print(p)
#print(v)
#print(best_swarm)
for(j in 1:iterations){
for (i in 1:S){
for (d in 1:n){
rp <- runif(1,0,1)
rg <- runif(1,0,1)
v[,i] <- omega*v[,i] + phiP*rp*(p[,i]-x[,i]) + phiG*rg*(best_swarm-x[,i])
}
x[,i] <- x[,i] + v[,i]
if (f(x[,i]) < f(p[,i])){
p[,i] <- x[,i]
#update best position in the swarm
if (f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
}
}
if((j%%2 == 0 && j < 20) || j == 1){
curve(f,lower,upper,main = c("iteration ",j))
points(x,f(x))
}
}
cat("best x value: ",best_swarm,"\n")
cat("minimum: ",f(best_swarm),"\n")
cat("\n")
}
f <- function(x,y){
return(x^2 -y^2)
}
#x <- matrix(0,nrow = 2,ncol = 10)
#lower <- c(-1,-1)
#upper <- c(1,1)
#for (i in 1:10){
#  for (k in 1:2){
#    x[k,i] <- runif(1,lower[k],upper[k])
#  }
#}
#print(x)
## have to implement lower and upper handling (they are vectors)
## initializing positions given lower vector and upper vector (for loop?)
swarm <- function(S,n,lower, upper,omega,phiP,phiG){
iterations <- 100
best_swarm <- lower
#particle positions
x <- matrix(0,nrow = n,ncol = S)
#particle best positions
p <- matrix(0,nrow = n,ncol = S)
#particle velocities
v <- matrix(0,nrow = n,ncol = S)
#for each particle i
for (i in 1:S){
#initial position
for (k in 1:n){
x[k,i] <- runif(1,lower[k],upper[k])
}
p[,i] <- x[,i]
if(f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
#initial velocity
for (k in 1:n){
v[k,i] <- runif(1,-abs(upper[k]-lower[k]),abs(upper[k]-lower[k]))
}
}
#print(x)
#print(p)
#print(v)
#print(best_swarm)
for(j in 1:iterations){
for (i in 1:S){
for (d in 1:n){
rp <- runif(1,0,1)
rg <- runif(1,0,1)
v[,i] <- omega*v[,i] + phiP*rp*(p[,i]-x[,i]) + phiG*rg*(best_swarm-x[,i])
}
x[,i] <- x[,i] + v[,i]
if (f(x[,i]) < f(p[,i])){
p[,i] <- x[,i]
#update best position in the swarm
if (f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
}
}
if((j%%2 == 0 && j < 20) || j == 1){
curve(f,lower,upper,main = c("iteration ",j))
points(x,f(x))
}
}
cat("best x value: ",best_swarm,"\n")
cat("minimum: ",f(best_swarm),"\n")
cat("\n")
}
f <- function(x,y){
return(x^2 -y^2)
}
#x <- matrix(0,nrow = 2,ncol = 10)
#lower <- c(-1,-1)
#upper <- c(1,1)
#for (i in 1:10){
#  for (k in 1:2){
#    x[k,i] <- runif(1,lower[k],upper[k])
#  }
#}
#print(x)
## have to implement lower and upper handling (they are vectors)
## initializing positions given lower vector and upper vector (for loop?)
swarm <- function(S,n,lower, upper,omega,phiP,phiG){
iterations <- 100
best_swarm <- lower
#particle positions
x <- matrix(0,nrow = n,ncol = S)
#particle best positions
p <- matrix(0,nrow = n,ncol = S)
#particle velocities
v <- matrix(0,nrow = n,ncol = S)
#for each particle i
for (i in 1:S){
#initial position
for (k in 1:n){
x[k,i] <- runif(1,lower[k],upper[k])
}
p[,i] <- x[,i]
if(f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
#initial velocity
for (k in 1:n){
v[k,i] <- runif(1,-abs(upper[k]-lower[k]),abs(upper[k]-lower[k]))
}
}
#print(x)
#print(p)
#print(v)
#print(best_swarm)
for(j in 1:iterations){
for (i in 1:S){
for (d in 1:n){
rp <- runif(1,0,1)
rg <- runif(1,0,1)
v[,i] <- omega*v[,i] + phiP*rp*(p[,i]-x[,i]) + phiG*rg*(best_swarm-x[,i])
}
x[,i] <- x[,i] + v[,i]
if (f(x[,i]) < f(p[,i])){
p[,i] <- x[,i]
#update best position in the swarm
if (f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
}
}
if((j%%2 == 0 && j < 20) || j == 1){
curve(f,lower,upper,main = c("iteration ",j))
points(x,f(x))
}
}
cat("best x value: ",best_swarm,"\n")
cat("minimum: ",f(best_swarm),"\n")
cat("\n")
}
f <- function(x,y){
return(x^2)
}
swarm(10,1,-4,4,.5,.5,.5)
#x <- matrix(0,nrow = 2,ncol = 10)
#lower <- c(-1,-1)
#upper <- c(1,1)
#for (i in 1:10){
#  for (k in 1:2){
#    x[k,i] <- runif(1,lower[k],upper[k])
#  }
#}
#print(x)
## have to implement lower and upper handling (they are vectors)
## initializing positions given lower vector and upper vector (for loop?)
swarm_nd <- function(S,n,lower, upper,omega,phiP,phiG){
iterations <- 100
best_swarm <- lower
#particle positions
x <- matrix(0,nrow = n,ncol = S)
#particle best positions
p <- matrix(0,nrow = n,ncol = S)
#particle velocities
v <- matrix(0,nrow = n,ncol = S)
#for each particle i
for (i in 1:S){
#initial position
for (k in 1:n){
x[k,i] <- runif(1,lower[k],upper[k])
}
p[,i] <- x[,i]
if(f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
#initial velocity
for (k in 1:n){
v[k,i] <- runif(1,-abs(upper[k]-lower[k]),abs(upper[k]-lower[k]))
}
}
#print(x)
#print(p)
#print(v)
#print(best_swarm)
for(j in 1:iterations){
for (i in 1:S){
for (d in 1:n){
rp <- runif(1,0,1)
rg <- runif(1,0,1)
v[,i] <- omega*v[,i] + phiP*rp*(p[,i]-x[,i]) + phiG*rg*(best_swarm-x[,i])
}
x[,i] <- x[,i] + v[,i]
if (f(x[,i]) < f(p[,i])){
p[,i] <- x[,i]
#update best position in the swarm
if (f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
}
}
if((j%%2 == 0 && j < 20) || j == 1){
curve(f,lower,upper,main = c("iteration ",j))
points(x,f(x))
}
}
cat("best x value: ",best_swarm,"\n")
cat("minimum: ",f(best_swarm),"\n")
cat("\n")
}
f <- function(x,y){
return(x^2)
}
swarm_nd(10,1,-4,4,.5,.5,.5)
#x <- matrix(0,nrow = 2,ncol = 10)
#lower <- c(-1,-1)
#upper <- c(1,1)
#for (i in 1:10){
#  for (k in 1:2){
#    x[k,i] <- runif(1,lower[k],upper[k])
#  }
#}
#print(x)
## have to implement lower and upper handling (they are vectors)
## initializing positions given lower vector and upper vector (for loop?)
swarm_nd <- function(S,n,lower, upper,omega,phiP,phiG){
iterations <- 100
best_swarm <- lower
#particle positions
x <- matrix(0,nrow = n,ncol = S)
#particle best positions
p <- matrix(0,nrow = n,ncol = S)
#particle velocities
v <- matrix(0,nrow = n,ncol = S)
#for each particle i
for (i in 1:S){
#initial position
for (k in 1:n){
x[k,i] <- runif(1,lower[k],upper[k])
}
p[,i] <- x[,i]
if(f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
#initial velocity
for (k in 1:n){
v[k,i] <- runif(1,-abs(upper[k]-lower[k]),abs(upper[k]-lower[k]))
}
}
#print(x)
#print(p)
#print(v)
#print(best_swarm)
for(j in 1:iterations){
for (i in 1:S){
for (d in 1:n){
rp <- runif(1,0,1)
rg <- runif(1,0,1)
v[,i] <- omega*v[,i] + phiP*rp*(p[,i]-x[,i]) + phiG*rg*(best_swarm-x[,i])
}
x[,i] <- x[,i] + v[,i]
if (f(x[,i]) < f(p[,i])){
p[,i] <- x[,i]
#update best position in the swarm
if (f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
}
}
if((j%%2 == 0 && j < 20) || j == 1){
curve(f,lower,upper,main = c("iteration ",j))
points(x,f(x))
}
}
cat("best x value: ",best_swarm,"\n")
cat("minimum: ",f(best_swarm),"\n")
cat("\n")
}
f <- function(x,y){
return(x^2-y^2)
}
swarm_nd(10,1,c(-4,-4),c(4,4),.5,.5,.5)
#x <- matrix(0,nrow = 2,ncol = 10)
#lower <- c(-1,-1)
#upper <- c(1,1)
#for (i in 1:10){
#  for (k in 1:2){
#    x[k,i] <- runif(1,lower[k],upper[k])
#  }
#}
#print(x)
## have to implement lower and upper handling (they are vectors)
## initializing positions given lower vector and upper vector (for loop?)
swarm_nd <- function(S,n,lower, upper,omega,phiP,phiG){
iterations <- 100
best_swarm <- lower
#particle positions
x <- matrix(0,nrow = n,ncol = S)
#particle best positions
p <- matrix(0,nrow = n,ncol = S)
#particle velocities
v <- matrix(0,nrow = n,ncol = S)
#for each particle i
for (i in 1:S){
#initial position
for (k in 1:n){
x[k,i] <- runif(1,lower[k],upper[k])
}
p[,i] <- x[,i]
if(f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
#initial velocity
for (k in 1:n){
v[k,i] <- runif(1,-abs(upper[k]-lower[k]),abs(upper[k]-lower[k]))
}
}
#print(x)
#print(p)
#print(v)
#print(best_swarm)
for(j in 1:iterations){
for (i in 1:S){
for (d in 1:n){
rp <- runif(1,0,1)
rg <- runif(1,0,1)
v[,i] <- omega*v[,i] + phiP*rp*(p[,i]-x[,i]) + phiG*rg*(best_swarm-x[,i])
}
x[,i] <- x[,i] + v[,i]
if (f(x[,i]) < f(p[,i])){
p[,i] <- x[,i]
#update best position in the swarm
if (f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
}
}
if((j%%2 == 0 && j < 20) || j == 1){
curve(f,lower,upper,main = c("iteration ",j))
points(x,f(x))
}
}
cat("best x value: ",best_swarm,"\n")
cat("minimum: ",f(best_swarm),"\n")
cat("\n")
}
f <- function(x){
return(x[1]^2-x[2]^2)
}
swarm_nd(10,1,c(-4,-4),c(4,4),.5,.5,.5)
