knitr::opts_chunk$set(echo = TRUE)
#Simple function
x <- matrix(rep(c(0,0),10),nrow = 100,ncol = 10)
print(x)
#Simple function
x <- list(c(0,0))
print(x)
print(x[1])
#Simple function
x <- list(rep(c(0,0),10))
print(x)
print(x[1])
#Simple function
x <- matrix(0,nrow = 2, ncol = 10 )
print(x)
#particle positions
x <- matrix(0,nrow = n,ncol = S)
x <- matrix(0,nrow = 2,ncol = 10)
print(x)
print(x[1])
print(x[1][1])
print(x[1][2])
print(x)
x <- matrix(c(1,2,3,4,5,6,7,8,9),nrow = 2,ncol = 10)
print(x)
print(x[1,1])
print(x[1,2])
print(x)
print(x)
print(x[1,2])
print(x[,2])
print(x)
print(x[,2])
print(x[,1])
print(x)
print(x[,1])
print(x)
print(x[,1])
x[,1] = c(4,4)
print(x)
print(x)
print(x[,1])
x[,1] = runif(2,-4,4)
print(x)
x <- matrix(c(1,2,3,4,5,6,7,8,9),nrow = 2,ncol = 10)
print(x)
print(x[,1])
x[,1] = runif(2,-4,4)
print(x)
swarm <- function(S,n,lower, upper,omega,phiP,phiG){
iterations <- 100
best_swarm <- c(lower,lower)
#particle positions
x <- matrix(0,nrow = n,ncol = S)
#particle best positions
p <- matrix(0,nrow = n,ncol = S)
#particle velocities
v <- matrix(0,nrow = n,ncol = S)
#for each particle i
for (i in 1:S){
#initial position
x[,i] <- runif(n,lower,upper)
p[,i] <- x[,i]
if(f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
#initial velocity
v[,i] <- runif(n,-abs(upper-lower),abs(upper-lower))
}
#print(x)
#print(p)
#print(v)
#print(best_swarm)
for(j in 1:iterations){
for (i in 1:S){
for (d in 1:n){
rp <- runif(1,0,1)
rg <- runif(1,0,1)
v[,i] <- omega*v[,i] + phiP*rp*(p[,i]-x[,i]) + phiG*rg*(best_swarm-x[,i])
}
x[,i] <- x[,i] + v[,i]
if (f(x[,i]) < f(p[,i])){
p[,i] <- x[,i]
#update best position in the swarm
if (f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
}
}
if((j%%2 == 0 && j < 20) || j == 1){
curve(f,lower,upper,main = c("iteration ",j))
points(x,f(x))
}
}
cat("best x value: ",best_swarm,"\n")
cat("minimum: ",f(best_swarm),"\n")
cat("\n")
}
swarm <- function(S,n,lower, upper,omega,phiP,phiG){
iterations <- 100
best_swarm <- c(lower,lower)
#particle positions
x <- matrix(0,nrow = n,ncol = S)
#particle best positions
p <- matrix(0,nrow = n,ncol = S)
#particle velocities
v <- matrix(0,nrow = n,ncol = S)
#for each particle i
for (i in 1:S){
#initial position
x[,i] <- runif(n,lower,upper)
p[,i] <- x[,i]
if(f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
#initial velocity
v[,i] <- runif(n,-abs(upper-lower),abs(upper-lower))
}
#print(x)
#print(p)
#print(v)
#print(best_swarm)
for(j in 1:iterations){
for (i in 1:S){
for (d in 1:n){
rp <- runif(1,0,1)
rg <- runif(1,0,1)
v[,i] <- omega*v[,i] + phiP*rp*(p[,i]-x[,i]) + phiG*rg*(best_swarm-x[,i])
}
x[,i] <- x[,i] + v[,i]
if (f(x[,i]) < f(p[,i])){
p[,i] <- x[,i]
#update best position in the swarm
if (f(p[,i]) < f(best_swarm)){
best_swarm <- p[,i]
}
}
}
if((j%%2 == 0 && j < 20) || j == 1){
curve(f,lower,upper,main = c("iteration ",j))
points(x,f(x))
}
}
cat("best x value: ",best_swarm,"\n")
cat("minimum: ",f(best_swarm),"\n")
cat("\n")
}
